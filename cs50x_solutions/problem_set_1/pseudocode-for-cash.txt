Ok so first thing get the float point and then 
times that by 100, so then all you have to work with is,
how many times does 25 go into the change and if there is change
over the remainder of it then get change for 10

Ok so see how many times 25 goes into the number e.g. 50 which is 50
cents coverted from dollars in order to figure it out from a float.
see how many times 25 goes into the coins, Im using a loop so,
it will check does 1 go into 25 no but 25 goes into 25 so yes then
add to the counter 1 (counter++) and then i need to somehow
check the remainder, so if it does have a remainder 

int r = coins / 25;
    int r2 = coins % 25; // Try adding whatever the remainder is 
    // so R2 says 2 remainder which is two pennies. e.g. counter += r2; ?
    for (int i = 0; i < coins; i++) {
        //if (r2 % 25 == 0) {
            if (r2 < 25 && r2 <= 10) {
                counter += 1;
                break;
            }
            //counter += 1;
            //break;
        //}
    }
    printf("r: %d\n", r);
    printf("r2: %d\n", r2);


        if (r2 == 0) {
            counter += 1; // Add a quarter here if there is no remainder.
            break;
        } else if (r2 <= 25) {
            counter += r2; // Add a quarter here if there is no remainder.
            break;
        }

//here
#include <stdio.h>
#include <cs50.h>
#include <math.h>

int main(void) {
    float f;
    do {
        f = get_float("Change: ");
    } while (f < 0);
    // Take the float number for the next part.
    // 1cents, 5cents, 10cents, 25cents.
    int quarters = 0;
    int dimes = 0;
    int nickels = 0;
    int pennies = 0;
    int total;
    int coins = round(f * 100);
    printf("Coins: %.2d\n", coins);
// Figure out how many times does the number go into 25.
    int r = coins / 25;
    int r2 = coins % 25; // Try adding whatever the remainder is 
    // so R2 says 2 remainder which is two pennies. e.g. counter += r2; ?
    while (r2 <= 0) {
        quarters = r;
        quarters++;
    }
    printf("r: %d\n", r);
    printf("r2: %d\n", r2);

    total = quarters + dimes + nickels + pennies;
    printf("Total Coins: %d\n", total);
}

ok so somehow subtract 25 from the number if the number is less than
25 start using pennies, um and yeah...i've been trying division
it is a division algorithm, so i thought i could store the remainder and 
the division there however when i try to calculate the modulus that is
10 it needs to be in a loop somehow which doesn't behave right
these numbers have been stored elsewhere outside of the loop.

the video seems to suggest while you use quarters, add a quarter and the
only way i could think you could do this is to take (25 - 100) i would of
thought division was the best way to do it, i have just tried the modulus
and divide operators to get this working. one method was to increment 
the coins in a loop up to the number and as it hits 25 it adds a quarter.
I will retry this method but it doesn't seem to work how i wanted it to

when there is no remainder it adds a quarter and it needs break; for some
reason occasionally to get desired results. 
when there is no remainder it adds a quarter, however i don't know 
how to store it when there is no remainder it will just go up to 1.10
for example and it would count that there. I thought of starting simple maybe
with quarters only but dimes dont go in so i added seperate coin variables
so that only 1 would be added when needed however the remainder from the
division for 1.00 for example is 100 and 25 goes into 100, 4 times. without
a remainder, however i cannot fathom how you would check when you can
detect to put a dime in unless you add a dime if it is less than 24.

Add a dime if it is less than 24.

I've made it so it only works with quarters so far.

:( input of 0.41 yields output of 4
    expected "4\n", not "Coins: 41\nr: ..."

:( input of 1.6 yields output of 7
    expected "7\n", not "Coins: 160\nr:..."
    
:( input of 4.2 yields output of 18
    expected "18\n", not "Coins: 420\nr:..."
